import { useState } from "react"
import { useSelector } from "react-redux"
import { selectActiveItemTelegramKey } from "@/features/projects/projectsSlice"
import {
  DndContext,
  DragOverlay,
  closestCorners,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
} from "@dnd-kit/core"
import { arrayMove, sortableKeyboardCoordinates } from "@dnd-kit/sortable"

import { Column } from "./Column"
import { CardComponent } from "./Card"

import {
  Empty,
  EmptyDescription,
  EmptyHeader,
  EmptyMedia,
  EmptyTitle,
} from "@/components/ui/empty"
import { Kanban as Icon } from "lucide-react"

export const Kanban = () => {
  const activeItemTelegramKey = useSelector(selectActiveItemTelegramKey)

  const [columns, setColumns] = useState([
    {
      id: 1,
      name: "Thread",
      cards: [
        { id: 11, text: "First" },
        { id: 12, text: "First-Two" },
      ],
    },
    { id: 2, name: "Active", cards: [{ id: 21, text: "Second" }] },
    { id: 3, name: "Done", cards: [{ id: 31, text: "Third" }] },
  ])

  const [activeId, setActiveId] = useState()

  const activeItemData = activeId
    ? columns.flatMap(col => col.cards).find(card => card.id === activeId)
    : null

  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    }),
  )

  function findContainer(id) {
    const container = columns.find(
      column => column.id === id || column.name === id,
    )
    if (container) {
      return container.id // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –∫–æ–ª–æ–Ω–∫–∏
    }

    // 2. –ò—â–µ–º ID –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ –º–∞—Å—Å–∏–≤–∞ 'cards' –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
    const columnWithCard = columns.find(column =>
      column.cards.some(card => card.id === id),
    )

    if (columnWithCard) {
      return columnWithCard.id // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –∫–æ–ª–æ–Ω–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –∫–∞—Ä—Ç–æ—á–∫—É
    }

    return undefined // –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  }

  const handleDragStart = event => {
    const { active } = event
    const { id } = active

    setActiveId(id)
  }

  function handleDragOver(event) {
    const { active, over, draggingRect } = event
    const { id } = active

    // –ï—Å–ª–∏ over ‚Äî null (–≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã), –∏–ª–∏ –Ω–µ—Ç ID (DragOverlay), —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
    if (!over) return
    const { id: overId } = over

    // üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º columns –≤–º–µ—Å—Ç–æ items
    const activeContainerId = findContainer(id, columns)
    const overContainerId = findContainer(overId, columns)

    if (
      !activeContainerId ||
      !overContainerId ||
      activeContainerId === overContainerId
    ) {
      return
    }

    setColumns(prevColumns => {
      // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∫–æ–ª–æ–Ω–æ–∫
      const activeContainer = prevColumns.find(c => c.id === activeContainerId)
      const overContainer = prevColumns.find(c => c.id === overContainerId)

      if (!activeContainer || !overContainer) return prevColumns

      // –ú–∞—Å—Å–∏–≤—ã –∫–∞—Ä—Ç–æ—á–µ–∫
      const activeItems = activeContainer.cards
      const overItems = overContainer.cards

      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã (findIndex, —Ç.–∫. —ç—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤)
      const activeIndex = activeItems.findIndex(item => item.id === id)
      const overIndex = overItems.findIndex(item => item.id === overId)

      // üí° –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–º–µ—â–∞–µ–º–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
      const movedItem = activeItems[activeIndex]

      // --- –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (—Å–ª–æ–∂–Ω–∞—è, –∏–∑ dnd-kit) ---
      let newIndex
      // –ï—Å–ª–∏ –±—Ä–æ—Å–∞–µ–º –Ω–∞ —Å–∞–º—É –∫–æ–ª–æ–Ω–∫—É (–ø—É—Å—Ç—É—é –∏–ª–∏ –Ω–µ—Ç)
      if (overContainer.id === overId) {
        newIndex = overItems.length
      } else {
        // –ï—Å–ª–∏ –±—Ä–æ—Å–∞–µ–º –Ω–∞ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        const isBelowLastItem =
          over &&
          overIndex === overItems.length - 1 &&
          draggingRect?.offsetTop > over.rect?.offsetTop + over.rect.height

        const modifier = isBelowLastItem ? 1 : 0

        newIndex = overIndex >= 0 ? overIndex + modifier : overItems.length
      }

      // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
      return prevColumns.map(column => {
        if (column.id === activeContainerId) {
          // 1. –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
          return {
            ...column,
            cards: column.cards.filter(card => card.id !== active.id),
          }
        } else if (column.id === overContainerId) {
          // 2. –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ü–µ–ª–µ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ newIndex
          const newCards = [...overItems]
          newCards.splice(newIndex, 0, movedItem) // –í—Å—Ç–∞–≤–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é

          return {
            ...column,
            cards: newCards,
          }
        }
        return column
      })
    })
  }

  function handleDragEnd(event) {
    const { active, over } = event
    const { id } = active

    // –°–±—Ä–æ—Å activeId –¥–ª—è DragOverlay
    setActiveId(null)

    if (!over) return

    const { id: overId } = over

    // üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º columns
    // const activeContainerId = findContainer(id, columns)
    // const overContainerId = findContainer(overId, columns)
    const activeContainerId = findContainer(id)
    const overContainerId = findContainer(overId)

    // –ï—Å–ª–∏ overContainerId –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, –∑–Ω–∞—á–∏—Ç, handleDragOver —É–∂–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª –¥–∞–Ω–Ω—ã–µ.
    // –ù–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.
    if (
      !activeContainerId ||
      !overContainerId ||
      activeContainerId !== overContainerId
    ) {
      return
    }

    // --- –õ–æ–≥–∏–∫–∞ –°–û–†–¢–ò–†–û–í–ö–ò –í–ù–£–¢–†–ò –û–î–ù–û–ì–û –ö–û–ù–¢–ï–ô–ù–ï–†–ê ---

    setColumns(prevColumns => {
      const targetContainer = prevColumns.find(c => c.id === activeContainerId)
      if (!targetContainer) return prevColumns

      const activeItems = targetContainer.cards

      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã (findIndex, —Ç.–∫. —ç—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤)
      const activeIndex = activeItems.findIndex(item => item.id === active.id)
      const overIndex = activeItems.findIndex(item => item.id === overId)

      if (activeIndex !== overIndex) {
        return prevColumns.map(column => {
          if (column.id === activeContainerId) {
            return {
              ...column,
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º arrayMove –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
              cards: arrayMove(activeItems, activeIndex, overIndex),
            }
          }
          return column
        })
      }
      return prevColumns
    })
  }

  if (!activeItemTelegramKey) {
    return (
      <Empty>
        <EmptyHeader>
          <EmptyMedia variant="icon">
            <Icon />
          </EmptyMedia>
          <EmptyTitle>Kanban Not Activated</EmptyTitle>
          <EmptyDescription>
            To activate the Kanban board for this component, please navigate to
            the "Settings" tab to enter the required data.
          </EmptyDescription>
        </EmptyHeader>
      </Empty>
    )
  }

  return (
    <div className="flex-1 overflow-y-auto p-4">
      <div className="flex flex-col h-full gap-4">
        <div className="grid gap-4 md:grid-cols-3 flex-1">
          <DndContext
            sensors={sensors}
            collisionDetection={closestCorners}
            onDragStart={handleDragStart}
            onDragOver={handleDragOver}
            onDragEnd={handleDragEnd}
          >
            {columns.map(column => (
              <Column
                key={column.id}
                id={column.id}
                name={column.name}
                cards={column.cards}
              />
            ))}
            <DragOverlay>
              {activeItemData ? (
                <CardComponent
                  id={activeItemData.id}
                  text={activeItemData.text} // –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–ø—Å –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                  isOverlay={true}
                />
              ) : null}
            </DragOverlay>
          </DndContext>
        </div>
      </div>
    </div>
  )
}
